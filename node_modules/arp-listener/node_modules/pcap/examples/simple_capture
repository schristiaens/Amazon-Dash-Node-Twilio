#!/usr/bin/env node

var pcap = require("../pcap"), pcap_session;
    
if (process.argv.length > 4) {
    console.error("usage: simple_capture interface filter");
    console.error("Examples: ");
    console.error('  simple_capture "" "tcp port 80"');
    console.error('  simple_capture eth1 ""');
    console.error('  simple_capture lo0 "ip proto \\tcp and tcp port 80"');
    process.exit(1);
}

function offline() {
    pcap_session = pcap.createOfflineSession(process.argv[2], process.argv[3]);
}

function online() {
    pcap_session = pcap.createSession(process.argv[2], process.argv[3]);

    // Print all devices, currently listening device prefixed with an asterisk
    console.log("Capture device list: ");
    pcap_session.findalldevs().forEach(function (dev) {
        var ret = "    ";
        if (pcap_session.device_name === dev.name) {
            ret += "* ";
        }
        ret += dev.name + " ";
        if (dev.addresses.length > 0) {
            ret += dev.addresses.filter(function (address) {
                return address.addr;
            }).map(function (address) {
                return address.addr + "/" + address.netmask;
            }).join(", ");
        } else {
            ret += "no address";
        }
        console.log(ret);
    });

    console.log();
}

try {
    var stat = require("fs").statSync(process.argv[2]);
    if (stat && stat.isFile()) {
        offline();
    } else {
        online();
    }
} catch (err) {
    online();
}

// libpcap's internal version numnber
console.log(pcap.lib_version);

function rpad(num, len) {
    var str = num.toString();
    while (str.length < len) {
        str += " ";
    }
    return str;
}

var DNSCache = require("../dns_cache");
var dns_cache = new DNSCache();

var IPv4Addr = require("../decode/ipv4_addr");
IPv4Addr.prototype.origToString = IPv4Addr.prototype.toString;
IPv4Addr.prototype.toString = function() {
    return dns_cache.ptr(this.origToString());
};


// Listen for packets, decode them, and feed the simple printer.  No tricks.
pcap_session.on("packet", function (raw_packet) {
    var packet = pcap.decode.packet(raw_packet);
    var header = packet.pcap_header;

    var ret = header.tv_sec + "." + rpad(header.tv_usec, 6) + " " + rpad(header.len + "B", 5) + " ";

    console.log(packet.payload.toString());
});
